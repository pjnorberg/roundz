{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Round Z app\n */\n\n$(function () {\n    new Vue({\n        el: '#app',\n        data: {\n            actionStatus: '',\n            tournament: tournament,\n            qualifyingMatches: [],\n            playoffMatches: [],\n            tournamentSize: 0,\n            playoffSize: 0,\n            tournamentMatchCount: 0\n        },\n        methods: {\n            resetApp: function resetApp() {\n                this.qualifyingMatches = [];\n                this.playoffMatches = [];\n                this.tournamentSize = 0;\n                this.playoffSize = 0;\n                this.tournamentMatchCount = 0;\n            },\n            addParticipant: function addParticipant(ev) {\n                var newParticipant = ev.target.value.trim();\n                if (newParticipant) {\n                    this.$resource('/participants/').save({\n                        name: newParticipant,\n                        tournament_id: this.tournament.id,\n                        _token: this.tournament.token\n                    }).then(function (response) {\n                        if (response.data.response == 'success') {\n                            this.tournament.participants.push({\n                                id: response.data.id,\n                                name: newParticipant,\n                                points: 0\n                            });\n                        }\n                    });\n                }\n                ev.target.value = '';\n            },\n            deleteParticipant: function deleteParticipant(index) {\n                var participantId = this.tournament.participants[index].id;\n                this.$resource('/participants/' + participantId).delete({ _token: this.tournament.token }).then(function (response) {\n                    if (response.data.response == 'success') {\n                        this.tournament.participants.splice(index, 1);\n                        this.resetApp();\n                    }\n                });\n            },\n            generateMatches: function generateMatches() {\n                // Get everyone in this tournament and shuffle this list randomly:\n                var totalPlayerCount = this.tournament.participants.length;\n                this.shuffleParticipants();\n\n                if (this.tournamentSizeOK(totalPlayerCount)) {\n                    // If tournament size is OK, go ahead and make a playoff:\n                    this.playoffSize = totalPlayerCount;\n                    this.tournamentSize = totalPlayerCount;\n                    this.calculateGames(0);\n                    this.makePlayoff(this.playoffSize, this.tournamentMatchCount);\n                    this.addParticipantsToPlayoff();\n                } else {\n                    // Otherwise we need qualifying rounds:\n                    this.tournamentSize = this.findTournamentSize(totalPlayerCount);\n                    this.generateQualifyingRound();\n\n                    // And then we can make a playoff as well.\n                }\n            },\n            generateQualifyingRound: function generateQualifyingRound() {\n                // The idea is that we have a tournament size (lets say 8), which is the closest value to the\n                // total number of players available (lets say 12). Then our qualifying round will just be a\n                // matter of having everyone play one game and the top 8 will be transferred to the playoff.\n                // (If uneven number of total players, one random player will be automatically qualified and\n                // and then the top 7 will enter the playoff.\n                var qualifiedPositions = this.tournamentSize;\n                console.log(qualifiedPositions);\n\n                // If this is an uneven count, subtract one and have a random player be directly qualified:\n                if (this.tournamentSize % 2 == 1) {\n                    this.directlyQualifyPlayer();\n                }\n            },\n            directlyQualifyPlayer: function directlyQualifyPlayer() {\n                var id = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n            },\n            addParticipantsToPlayoff: function addParticipantsToPlayoff() {\n                // We have lets say 15 games, for 16 players. That means 8 games, or 1 per 2 players first round!\n                var firstRound = this.playoffSize / 2;\n\n                // Since we have shuffled our player list, connecting them to a game should be easy enough.\n                for (var i = 0; i < firstRound; i++) {\n                    this.playoffMatches[i].home_participant_id = this.tournament.participants[i + i].id;\n                    this.playoffMatches[i]._home_name = this.tournament.participants[i + i].name;\n                    this.playoffMatches[i].away_participant_id = this.tournament.participants[i + i + 1].id;\n                    this.playoffMatches[i]._away_name = this.tournament.participants[i + i + 1].name;\n                }\n            },\n            /**\n             * Create a playoff, by recursively adding matches per round.\n             * @param participantsCount\n             * @param maxGames\n             * @param matchId\n             * @param round\n             * @param playedMatchIds\n             * @returns {*}\n             */\n            makePlayoff: function makePlayoff(participantsCount, maxGames) {\n                var matchId = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n                var round = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];\n                var playedMatchIds = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];\n\n\n                if (!matchId) {\n                    this.playoffMatches = [];\n                }\n\n                // Take the list of players and divide by 2 to get no. of matches needed for round 1.\n                // Then recursively divide by 2 until 1 (the final).\n\n                // Reset count of previous match IDs to collect only this round later:\n                var previousRoundMatchIds = playedMatchIds.length > 0 ? playedMatchIds : [];\n                playedMatchIds = [];\n\n                // Make this round of games:\n                participantsCount = participantsCount / 2;\n                for (var i = 0; i < participantsCount; i++) {\n                    var home = null,\n                        away = null;\n\n                    if (round > 1 && previousRoundMatchIds.length > 0) {\n                        home = previousRoundMatchIds[i + i];\n                        away = previousRoundMatchIds[i + i + 1];\n                    }\n\n                    this.createMatch(matchId, round, home, away);\n                    playedMatchIds.push(matchId);\n                    matchId++;\n                }\n\n                // Count down to zero:\n                maxGames -= participantsCount;\n\n                // Keep going if we still have games to make:\n                if (maxGames) {\n                    return this.makePlayoff(participantsCount, maxGames, matchId, ++round, playedMatchIds);\n                }\n\n                return true;\n            },\n            /**\n             * Create matches (without teams assigned) but linked to previous matches (if\n             * @param id\n             * @param round\n             * @param home\n             * @param away\n             * @param playoff\n             */\n            createMatch: function createMatch(id, round, home, away) {\n                var playoff = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];\n\n                // 'id', 'home_team_from' and 'away_team_from' are all relative IDs generated by this application.\n                // Underscored versions are the database-persisted versions.\n                var match = {\n                    _id: null,\n                    _home_team_from: null,\n                    _away_team_from: null,\n                    id: id,\n                    round: 0,\n                    home_team_from: null,\n                    away_team_from: null,\n                    home_participant_id: null,\n                    away_participant_id: null,\n                    playoff: playoff,\n                    home_score: 0,\n                    away_score: 0,\n                    finished: 0\n                };\n\n                if (playoff) {\n                    match.home_team_from = home;\n                    match.away_team_from = away;\n                    match.round = round;\n                }\n\n                this.playoffMatches.push(match);\n                console.log('match ' + id + ', round ' + round + ', winners from matches ' + home + ' vs ' + away);\n            },\n            /**\n             * Check if number is a workable size for a tournament.\n             * @param number\n             * @returns {*}\n             */\n            tournamentSizeOK: function tournamentSizeOK(number) {\n                if (number > 1) {\n                    number = number / 2;\n                    return this.tournamentSizeOK(number);\n                }\n                return number < 1 ? false : true;\n            },\n            /**\n             * Get the workable size of a tournament, i.e. 2/4/8/16 players for total no of participants.\n             * @param participants\n             * @returns {*}\n             */\n            findTournamentSize: function findTournamentSize(participants) {\n                if (!this.tournamentSizeOK(participants)) {\n                    participants = participants - 1;\n                    return this.findTournamentSize(participants);\n                }\n                return participants;\n            },\n            /**\n             * Randomize the list of participants.\n             */\n            shuffleParticipants: function shuffleParticipants() {\n                var array = this.tournament.participants;\n                var currentIndex = array.length,\n                    temporaryValue,\n                    randomIndex;\n                while (0 !== currentIndex) {\n                    randomIndex = Math.floor(Math.random() * currentIndex);\n                    currentIndex -= 1;\n                    temporaryValue = array[currentIndex];\n                    array[currentIndex] = array[randomIndex];\n                    array[randomIndex] = temporaryValue;\n                }\n                this.tournament.participants = array;\n            },\n            setStatus: function setStatus() {\n                var text = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n                var maxDuration = arguments.length <= 1 || arguments[1] === undefined ? 5000 : arguments[1];\n\n                this.actionStatus = text ? '<i class=\"fa fa-cog fa-spin\"></i> &nbsp; ' + text : '';\n            },\n            /**\n             * Calculate number of matches in this tournament (based on tournamentSize).\n             * @param matches\n             * @returns {*}\n             */\n            calculateGames: function calculateGames() {\n                var matches = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n                if (!matches) {\n                    matches = this.tournamentSize;\n                    this.tournamentMatchCount = 0;\n                }\n                if (matches > 1) {\n                    matches = matches / 2;\n                    this.tournamentMatchCount += matches;\n                    return this.calculateGames(matches);\n                }\n                return true;\n            }\n        }\n    });\n});\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}